# Области видимости переменнных и глобальные функции

# Пользовательская функция создаётся при помощи ключевого слова "def" definition
# Имя пользовательской функции можно выбирать любое за исключением ключевых слов языка Python, а так же  уже встроенных имён функций
# Строка всегда должны заканчиваться доеточим как ниже в примере
# Инструкции функции располагаются строками ниже с табуляцией

# Существет два типа переменных: ГЛОБАЛЬНЫЕ и ЛОКАЛЬНЫЕ
# ГЛОБАЛЬНЫЕ - те переменные к которым можно обращаться из инструкции внутри функции
# ЛОКАЛЬНЫЕ - те переменные к которым нельзя обращаться из вне и создаются только внутри функции
# Если мы хотим сделать переменную глобальную и получать к ней доступ то использцуем ключевое слово "global" после которого следует имя переменной
# Если есть две переменные локальная и глобальная с одинаковым названием, то функция будет использовать локальную версию по умолчанию
# Пример
def rectangle():
    a = float(input("Width:"))
    b = float(input("Length"))
    print("Square:", a*b)

def triangle():
    a = float(input("Base:"))
    h = float(input("Height"))
    print("Square:", 0.5*a*h)

figure = input("1 - rectangle, 2 - triangle:")
if figure == "1":
    rectangle()
elif figure == "2":
    triangle()
# Пять переменных. Одна глобальная figure. Четыре локальных a, b из функции прямоугольника и a, h из функции треугольника
# Если, находясь в глобальной области видимости, мы попытаемся обратиться к локальной переменной, то возникнет ошибка
# ВАЖНО  менять значения глобальных переменных в теле функции – плохая практика.

# Ниже в примере площадь задана глобально и равна нулю

Square = 0

def rectangle():
    a = float(input("Width:"))
    b = float(input("Lenght"))
    Square = a*b
    print("Local Square:", Square) # Здесь площадь локальная
    return Square # Если не делать "return, то площадь будет равна нулу - глобальной площади"

def triangle():
    a = float(input("Base"))
    h = float(input("Height"))
    Square = 0.5*a*h
    print("Local Square:", Square)
    return Square

figure = input("1 - rectangle, 2 - triangle:")
if figure == "1":
    rectangle()
elif figure == "2":
    triangle()

# Выводим на печать глобальную площадь, чтобы убедиться о её неизменности
print("Global Square:", Square)

# Так же существует постановка аргумента
# Аргументу помжно передать знаечение, указав его в скобках при вызове функции
# Пример
"""
def alfa (user): - user то аргумент
elfa("Mike") - мы передаём какае-то знаечение аргументу user
"""
# Аргументы можно писать через запятые, задавать им значения сразу при вызове функции

def work(name, lang, sys):
    print("User name:", name, "\tLanguage:", lang, "\tPlatform:", sys)
# Функция work принимает три аргумента и выводит их на печать
# Вызовим функцию и передадим ей значения аргументов в нужном порядке(в котором они определены)
work("Alex", "Python", "Windows")

# Если принудительно задать аргументам значения даже не в том порядке, ничего страшного в этом не будет

work(lang="Java\t", name="Anna", sys="Mac")

# Поэксперементируем с изминением аргумента
def work2 (name = "Nik\t", lang = "Python"):
    print("User name:", name, "\tLanguage:", lang)

work2()
work2(lang="C++")
work2(name="Boris")
work2("Susan", "C#")