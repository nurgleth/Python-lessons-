"""
ООП и делегирование: объекты-обертки
В языке
Python делегирование часто реализуется с помощью метода __getattr__, потому
что он перехватывает попытки доступа к несуществующим атрибутам. Класс-
обертка (иногда называется прокси-классом) может использовать метод __getattr__
для перенаправления обращений к обернутому объекту. Класс-обертка
повторяет интерфейс обернутого объекта и может добавлять дополнительные
операции.
"""

class wrapper:
    def __init__(self, object):
        self.wrapped = object                   # Сохранить объект
    def __getattr__(self, attrname):
        print("Trace:", attrname)               # Отметить факт извлечения
        return getattr(self.wrapped, attrname)  # Делегировать извлечение

x = wrapper([1, 2, 3])                          # Обернуть список
x.append(4)                                     # Делегировать операцию методу списка
print(x.wrapped)                                # Вывести обернутый объект

x = wrapper({"a": 1, "c": 2})                   # Обернуть список
x.keys()                                        # Делегировать операцию методу словаря
print(x.keys())