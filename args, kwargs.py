# Что означает *args, **kwargs
# звёздочка назвается астерикс
# Обычная функция складывающаа два числа
def add(a, b):
    print(a + b)

add(5, 10)
# Она не универсальная и не воспринимает больше чем два числа
# что делать когда имеется переменное количество данных?
#  * - означает упаковку всех входящих аргументов в  данную функцию в КАРТЕДЖ
# сам args это просто название, оно может быть любым
# sum - принимает на вход картедж или список
def addup(*args):

    print(sum(args))


addup(5, 10 , 5, 20, 0, 1)

# Для таго чтобы в функцию с args передать СПИСОК как структура

d = [1, 2, 3]
# нужно указать звёздочку, если её не укзаать, то при входе в функция список d будет упакован в картедж, что вызовит ошибку
addup(*d)

# НЮАНСЫ
# Первый, если добавлять позиционны аргумент в функцияю args, например
print("\nПервый нюанс с добавлением нового аргумента")
def addup1(a, *args):
    print(a)
    print(args)
    print(sum(args))

s = [1, 2 ,3 ,4]

addup1(*s)
# Распаковка списка произошла следующим образом: первый элемент попал в переменную "a" ,а остаток в args

# Второй нюанс: в функции со звёздочкой нельзя передавать генераторы

print("\nВторой нюанс с генераторами")

def gen():
    for i in range(1, 10):
        yield i

addup(*gen())

# Генераторы должны дробить результат на части и отдавать нам его по кусочкам
# Когда мы помечаем генератор звёздочкой, он полность выполняет свою последовательность и только после этого попадает в функцию, что занимает очень много памяти и может положить машину

# ** означают упаковку в СЛОВАРЬ
print("\n Kwargs")
def addup2(*args, **kwargs):
    print(args)
    print(kwargs)

addup2(*s, street = "Lenina", house = 10)

# ВАЖНО если в функции нужно именно список для обработки, то нужно передавать именно список без всяких args, но если вы не знаете количество аргументов и тд то используем args
